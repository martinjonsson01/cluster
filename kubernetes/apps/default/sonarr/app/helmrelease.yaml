---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: sonarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: longhorn
      namespace: storage
    - name: cnpg
      namespace: cnpg-system
  driftDetection:
    mode: enabled
  values:
    controllers:
      sonarr:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/sonarr
              tag: 4.0.13.2932@sha256:b9f76d8f542f9783c24cec4d26dc5fffcb2fca8eae1bc3170eadc0cf9d74120e
            env:
              SONARR__APP__INSTANCENAME: Sonarr
              SONARR__APP__THEME: dark
              SONARR__AUTH__METHOD: External
              SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
              SONARR__LOG__DBENABLED: "False"
              SONARR__LOG__LEVEL: info
              SONARR__SERVER__PORT: &port 8989
              SONARR__UPDATE__BRANCH: main
              SONARR__POSTGRES__HOST: sonarr-db-rw.default
              SONARR__POSTGRES__PORT:
                secretKeyRef:
                  name: sonarr-db-app
                  key: port
              SONARR__POSTGRES__USER:
                secretKeyRef:
                  name: sonarr-db-app
                  key: user
              SONARR__POSTGRES__PASSWORD:
                secretKeyRef:
                  name: sonarr-db-app
                  key: password
              SONARR__POSTGRES__MAINDB:
                secretKeyRef:
                  name: sonarr-db-app
                  key: dbname
              TZ: ${TIMEZONE}
            envFrom:
              - secretRef:
                  name: sonarr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 4Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: sonarr
        ports:
          http:
            port: *port
    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/icon: sh-sonarr.svg
          gethomepage.dev/name: Sonarr
          gethomepage.dev/widget.type: "sonarr"
          gethomepage.dev/widget.url: "http://sonarr.default.svc:8989"
          gethomepage.dev/widget.key: ${SECRET_HOMEPAGE_VAR_SONARR_API_TOKEN}
          gethomepage.dev/widget.enableQueue: "true"
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: sonarr
      tmp:
        type: emptyDir
      media:
        type: nfs
        server: ${SECRET_NAS_IP}
        path: /volume1/Media
        globalMounts:
          - path: /Media
